#!/bin/bash

# Ensure the script is being run as root for system-level changes
if [ "$(id -u)" -ne 0 ]; then
    echo "This script must be run as root!" >&2
    exit 1
fi

# Prompt user to ensure they understand the implications
echo "This script will: "
echo "1. Ensure the sudo command cannot be altered."
echo "2. Prevent root password changes by locking the /etc/shadow file and restricting the passwd command."
echo "Do you want to proceed? (y/N): "
read -r proceed

if [[ "$proceed" != "y" && "$proceed" != "Y" ]]; then
    echo "Exiting the script."
    exit 1
fi

echo "Proceeding with security measures..."

# Function to ensure sudo command cannot be altered or tampered with
function secure_sudo() {
    echo "Securing the sudo command..."

    # 1. Disable `passwd` command for non-root users
    echo "Disabling the 'passwd' command for non-root users..."
    chmod 700 /usr/bin/passwd
    echo "The 'passwd' command is now restricted to the root user."

    # 2. Set immutable flag on the sudo command to prevent tampering
    echo "Setting immutable flag on the sudo command..."
    chattr +i /usr/bin/sudo
    if [ $? -eq 0 ]; then
        echo "The 'sudo' command is now immutable and cannot be altered."
    else
        echo "Failed to set immutable flag on 'sudo'. You may need to check your permissions."
        exit 1
    fi

    # 3. Lock `/etc/sudoers` to prevent tampering
    echo "Setting permissions to lock down the sudoers file..."
    chmod 440 /etc/sudoers
    echo "The 'sudoers' file is now read-only for all users except root."

    # Verify that sudo is working correctly
    echo "Verifying sudo functionality..."
    sudo -v
    if [ $? -ne 0 ]; then
        echo "You do not have sudo privileges. Exiting..."
        exit 1
    fi
}

# Function to prevent root password changes
function prevent_root_password_change() {
    echo "Preventing root password changes..."

    # 1. Lock `/etc/shadow` file to prevent modification
    echo "Locking the '/etc/shadow' file to prevent modifications..."
    chattr +i /etc/shadow
    if [ $? -eq 0 ]; then
        echo "The '/etc/shadow' file is now immutable. Root password cannot be modified."
    else
        echo "Failed to set immutable flag on '/etc/shadow'."
        exit 1
    fi

    # 2. Ensure that the passwd command is disabled
    echo "Disabling the 'passwd' command to prevent changing any passwords..."
    chmod 700 /usr/bin/passwd
    echo "The 'passwd' command is now restricted to the root user."

    # 3. Protect against root login through sudo for other users
    echo "Restricting access to the 'passwd' command through sudo for all users..."
    echo "ALL ALL= /usr/bin/passwd" | sudo tee -a /etc/sudoers > /dev/null

    # 4. Audit the use of passwd command
    echo "Setting up audit for the 'passwd' command..."
    sudo auditctl -w /usr/bin/passwd -p x
    echo "Audit rule added for passwd command usage."

    echo "Root password protection is now active."
}

# Prompt to secure sudo and prevent root password changes
echo "Do you want to secure the sudo command and prevent root password changes? (y/N): "
read -r secure_sudo_choice

if [[ "$secure_sudo_choice" == "y" || "$secure_sudo_choice" == "Y" ]]; then
    secure_sudo
    prevent_root_password_change
else
    echo "Skipping sudo and root password security steps."
fi

# Prompt to make the script immutable (optional)
echo "Do you want to make this script immutable so that it cannot be altered? (y/N): "
read -r make_script_immutable

if [[ "$make_script_immutable" == "y" || "$make_script_immutable" == "Y" ]]; then
    echo "Setting the immutable flag on this script..."
    chattr +i "$0"
    if [ $? -eq 0 ]; then
        echo "The script is now immutable. It cannot be modified unless the immutable flag is removed."
    else
        echo "Failed to set the immutable flag on this script."
    fi
else
    echo "You chose not to make the script immutable."
fi

# Final message
echo "Security measures completed. Please review all actions taken to ensure your system is properly secured."

